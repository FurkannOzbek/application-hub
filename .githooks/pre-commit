#!/bin/bash

# Track currently staged files in git for both frontend and api
staged_frontend_files=$(git diff --cached --name-only --diff-filter=ACM frontend/ | grep -E '\.(js|jsx|ts|tsx)$')
staged_api_files=$(git diff --cached --name-only --diff-filter=ACM api/ | grep -E '\.(js|jsx|ts|tsx)$')

# Run Husky hooks for the frontend directory
echo "Running Husky pre-commit hooks for frontend..."
(cd frontend && npx eslint --fix --ext .js,.jsx,.ts,.tsx . && npm run format -- --write)

# Check if any of the staged frontend files were modified by lint/format
if git diff --name-only frontend/ | grep -q -E '\.(js|jsx|ts|tsx)$'; then
  modified_frontend_files=$(git diff --name-only frontend/ | grep -E '\.(js|jsx|ts|tsx)$')
  if [[ -n $(echo "$modified_frontend_files" | grep -Fxf <(echo "$staged_frontend_files")) ]]; then
    echo "Files were updated during lint/format in frontend. Aborting commit."
    exit 1
  fi
fi

echo "Running Husky pre-commit hooks for api..."
# Run Husky hooks for the api directory
(cd api && npx eslint --fix . && npm run format -- --write)

# Check if any of the staged api files were modified by lint/format
if git diff --name-only api/ | grep -q -E '\.(js|jsx|ts|tsx)$'; then
  modified_api_files=$(git diff --name-only api/ | grep -E '\.(js|jsx|ts|tsx)$')
  if [[ -n $(echo "$modified_api_files" | grep -Fxf <(echo "$staged_api_files")) ]]; then
    echo "Files were updated during lint/format in api. Aborting commit."
    exit 1
  fi
fi

# run build for frontend
echo "Building frontend..."
(cd frontend && npm run build)

# if build fails, abort commit
if [ $? -ne 0 ]; then
  echo "Build failed. Aborting commit."
  exit 1
fi

echo "All checks passed in both frontend and api!"
exit 0
